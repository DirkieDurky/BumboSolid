@using BumboSolid.Data.Models
@model BumboSolid.Web.Models.EditFactorsViewModel

@{
	String[] daysOfTheWeek = { "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrijdag", "Zaterdag", "Zondag" };

	String[] factorTypes = { "Feestdagen", "Weer", "Overig" };

	int value;
}
<form asp-action="Aanmaken">
	<input type="hidden" asp-for="Prognosis.Id" />
	<input type="hidden" asp-for="Prognosis.Year" />
	<input type="hidden" asp-for="Prognosis.Week" />
	<table class="table" cellspacing="0">
		<tr>
			<th></th>
			<th scope="col" class="rounded-top table-gray">Schatting Bezoekersdrukte</th>
			<th scope="col" class="rounded-top table-secondary">Feestdagen</th>
			<th scope="col" class="rounded-top table-gray">
				<button type="button">
					Weer
					<img src="~/images/pencil-square.svg" alt="Edit Icon" width="16" height="16" />
				</button>
			</th>
			<th scope="col" class="rounded-top table-secondary">Overig</th>
			<th scope="col" class="rounded-top table-gray">Totale Schatting Bezoekersdrukte</th>
			<th scope="col" class="rounded-top table-secondary">Activiteit</th>
			<th scope="col" class="rounded-top table-gray">Functie</th>
			<th scope="col" class="rounded-top table-secondary">Duur en hoeveelheid</th>
		</tr>
		@for (int i = 0; i < daysOfTheWeek.Length; i++)

		{

			String day = daysOfTheWeek[i];
			<tr>
				<th scope="row">@day</th>
				@{
					if (Model.VisitorEstimatePerDay == null)
					{
						value = 0;
					}
					else
					{
						value = Model.VisitorEstimatePerDay![(byte)i];
					}
				}
				<td class="table-gray"><input name="visitorEstimates" type="number" class="form-control" value="@value"></td>

				@{
					value = Model.Prognosis.PrognosisDays.First(x => x.Weekday == i).Factors.First(x => x.Type == "Feestdagen").Impact;
				}
				<td class="table-secondary"><input name="holidays" type="number" class="form-control small-input" value="@value"></td>

				@{
					value = Model.Prognosis.PrognosisDays.First(x => x.Weekday == i).Factors.First(x => x.Type == "Weer").Impact;
				}
				<td class="table-gray">
					<select name="weather" type="number" class="form-control small-input form-select" value="@value">
						@{
							foreach (Weather weatherValue in Model.WeatherValues)

							{
								<option value="@weatherValue.Id">@weatherValue.Impact</option>
							}
						}
					</select>
				</td>

				@{
					value = Model.Prognosis.PrognosisDays.First(x => x.Weekday == i).Factors.First(x => x.Type == "Overig").Impact;
				}
				<td class="table-secondary">
					<button name="other" type="button" class="table-button">@value</button>
					<!--
					hidden inputs containing the data submitted to the method, the second
					input is empty and has to still be filled with the description of an excess factor
					-->
					<input name="other" type="hidden" value="@value" />
					<input name="description" type="hidden" />
				</td>

				<td class="table-gray">
					<p class="background-light impact-unchangeable-dark">...</p>
				</td>

				<td class="table-secondary">
					<p class="background-light impact-unchangeable-dark">...</p>
				</td>

				<td class="table-gray">
					<p class="background-light impact-unchangeable-dark">...</p>
				</td>

				<td class="table-secondary">
					<p class="background-light impact-unchangeable-dark">...</p>
				</td>
			</tr>
		}
	</table>

	<div class="d-flex flex-row">
		<a class="btn btn-danger me-3" asp-controller="Prognoses" asp-action="Index">Prognose Afbreken</a>
		<input type="submit" class="btn btn-primary" value="Prognose Berekenen">
	</div>
</form>
