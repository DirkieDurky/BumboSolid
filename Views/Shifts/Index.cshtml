@model IEnumerable<BumboSolid.Data.Models.Week>

@{
	ViewData["Title"] = "Rooster";
	// TODO fix hardcoded dates
	Int16 week = 2;
	Int16 year = 2024;
	DateTime startDate = FirstDateOfWeekISO8601(year, week);
	DateTime endDate = startDate.AddDays(6);

	var Shifts = Model.Where(model => model.WeekNumber == week).SelectMany(model => model.Shifts).Select(shift => new
	{
		shift.Weekday,
		shift.StartTime,
		shift.EndTime,
		shift.ExternalEmployeeName
	});

	string[,] schedule = new string[7, 24];

	foreach (var shift in Shifts)
	{
		int hours = shift.EndTime.Hour - shift.StartTime.Hour;
		if (shift.EndTime.Minute > 0)
			hours++;

		for (int i = 0; i < hours; i++)
		{
			if (schedule[shift.Weekday, shift.StartTime.Hour + i] != null)
			{
				schedule[shift.Weekday, shift.StartTime.Hour + i] += ", <br />";
			}

			schedule[shift.Weekday, shift.StartTime.Hour + i] += shift.ExternalEmployeeName!;
		}
	}
}

@functions {
	public static DateTime FirstDateOfWeekISO8601(int year, int weekOfYear)
	{
		DateTime jan1 = new DateTime(year, 1, 1);
		int daysOffset = DayOfWeek.Thursday - jan1.DayOfWeek;

		DateTime firstThursday = jan1.AddDays(daysOffset);
		var cal = System.Globalization.CultureInfo.CurrentCulture.Calendar;
		int firstWeek = cal.GetWeekOfYear(firstThursday, System.Globalization.CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);

		var weekNum = weekOfYear;
		if (firstWeek == 1)
		{
			weekNum -= 1;
		}

		var result = firstThursday.AddDays(weekNum * 7);
		return result.AddDays(-3);
	}
}

<!-- TODO Voeg filter systeem toe bij rooster -->

<header class="d-flex align-items-center gap-3 justify-content-center gap-3">
	<div class="w-100 text-align text-end">
		<a class="new-btn">Rooster Beheren</a>
	</div>
	<div class="mx-3 text-center text-nowrap">
		<h1>Rooster</h1>
		<p>@startDate.ToString("dd/MM/yyyy") - @endDate.ToString("dd/MM/yyyy")</p>
	</div>
	<div class="w-100">
		<a class="new-btn">Toevoegen</a>
	</div>
</header>

<div class="container p-1 border-solid-black border-radius-5 schedule-row-width-fix">
	<div class="row schedule min-height-0 fw-bold">
		<div class="hour-minute-column"></div>
		<div class="col mb-1">Maandag</div>
		<div class="col mb-1">Dinsdag</div>
		<div class="col mb-1">Woensdag</div>
		<div class="col mb-1">Donderdag</div>
		<div class="col mb-1">Vrijdag</div>
		<div class="col mb-1">Zaterdag</div>
		<div class="col mb-1">Zondag</div>
	</div>
	@for (int hour = 7; hour <= 20; hour++)
	{
		<hr class="schedule-hr" />
		<div class="row schedule">
			<div class="hour-minute-column">@hour:00</div>
			@for (int day = 0; day < 7; day++)
			{
				<div class="col">
					@if (schedule[day, hour] != null)
					{
						if (hour > 6 && hour < 20) {
							if (schedule[day, hour + 1] != null && schedule[day, hour - 1] != null) {
								<a class="schedule-item-center">@Html.Raw(schedule[day, hour])</a>
							}
							else if (schedule[day, hour + 1] != null) {
								<a class="schedule-item-top">@Html.Raw(schedule[day, hour])</a>
							}
							else if (schedule[day, hour - 1] != null)
							{
								<a class="schedule-item-bottom">@Html.Raw(schedule[day, hour])</a>
							}
							else {
								<a class="schedule-item">@Html.Raw(schedule[day, hour])</a>
							}
						} else if (hour == 0) {
							if (schedule[day, hour + 1] != null)
							{
								<a class="schedule-item-top">@Html.Raw(schedule[day, hour])</a>
							} else {
								<a class="schedule-item">@Html.Raw(schedule[day, hour])</a>
							}
						} else {
							if (schedule[day, hour - 1] != null)
							{
								<a class="schedule-item-bottom">@Html.Raw(schedule[day, hour])</a>
							}
							else
							{
								<a class="schedule-item">@Html.Raw(schedule[day, hour])</a>
							}
						}
					}
				</div>
			}
		</div>
	}
</div>