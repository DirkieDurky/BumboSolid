@model BumboSolid.Models.SchedulesViewModel

@{
    ViewData["Title"] = "Roosters inzien";

    string[] daysOfTheWeek = { "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrijdag", "Zaterdag", "Zondag" };

    var schedule = Model.Weeks.First(w => w.Id == Model.WeekId);
    var shifts = schedule.Shifts;
    var departments = shifts.Select(s => s.Department).Distinct();

    DateTime startDate = GetFirstDateOfWeek(schedule.Year, schedule.WeekNumber);
    DateTime endDate = startDate.AddDays(6);
}

@functions {
    public static DateTime GetFirstDateOfWeek(int year, int weekOfYear)
    {
        var jan1 = new DateTime(year, 1, 1);
        var daysOffset = (int)DayOfWeek.Monday - (int)jan1.DayOfWeek;
        var firstMonday = jan1.AddDays(daysOffset > 0 ? daysOffset - 7 : daysOffset);
        return firstMonday.AddDays((weekOfYear - 1) * 7);
    }
}

<header class="d-flex flex-column align-items-center">
    <div class="d-flex justify-content-between w-100 header-items">
        <div>
            <a class="btn new-btn" asp-action="ManagerSchedule" asp-route-id="@Model.WeekId">
                Rooster
            </a>
        </div>
        <div>
            <a class="btn new-btn @(Model.PreviousWeekId == null ? "disabled" : "")"
               asp-action="OverviewSchedule" asp-route-id="@Model.PreviousWeekId">
                Vorige Week
            </a>
        </div>
        <div class="text-center d-flex flex-column align-items-center">
            <h1 class="text-nowrap">Rooster Overzicht</h1>
            <p>@startDate.ToString("dd/MM/yyyy") - @endDate.ToString("dd/MM/yyyy")</p>
        </div>
        <div>
            <a class="btn new-btn @(Model.NextWeekId == null ? "disabled" : "")"
               asp-action="OverviewSchedule" asp-route-id="@Model.NextWeekId">
                Volgende Week
            </a>
        </div>
        <div>
            <a class="btn new-btn @(Model.IsCurrentWeek ? "disabled" : "")"
               asp-action="OverviewSchedule" asp-route-id="">
                Huidige Week
            </a>
        </div>
    </div>
</header>

<div class="d-flex justify-content-center w-100">
    <button id="togglePrognosisButton" class="btn new-btn" type="button">
        Vergelijk Prognose
    </button>
    <a class="btn new-btn" asp-action="Availabilities" asp-route-weekId="@Model.WeekId">
        Beschikbaarheid
    </a>
</div>

@if (!Model.HasSchedule)
{
    <body>
        <div class="d-flex flex-column align-items-center gap-5 m-5">
            <h3>Er is nog geen rooster aangemaakt.</h3>
            <h4>Maak er een aan!</h4>
            <form asp-action="Create">
                <div class="form-group">
                    <input type="hidden" name="id" value="@Model.WeekId" />
                    <input type="hidden" name="returnUrl" value="@Context.Request.Path" />
                    <input type="submit" value="Nieuw Rooster Aanmaken" class="btn new-btn" />
                </div>
            </form>
        </div>
    </body>
}
else
{
    <body class="schedule">
        <div class="container mt-4">
            <table class="table table-striped table-bordered table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th rowspan="2">Dag</th>
                        @foreach (var department in Model.Departments.Select(d => d.Name))
                        {
                            <th colspan="2" class="text-center">@department</th>
                        }
                        <th colspan="2" class="text-center">Totaal</th>
                    </tr>
                    <tr>
                        @foreach (var department in Model.Departments.Select(d => d.Name))
                        {
                            <th class="text-center">FTE</th>
                            <th class="text-center">Uren</th>
                        }
                        <th class="text-center">FTE</th>
                        <th class="text-center">Uren</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var day in daysOfTheWeek)
                    {
                        <tr>
                            <td class="font-weight-bold">@day</td>
                            @{
                                double totalPersonnelForDay = 0;
                                double totalHoursForDay = 0;
                                double prognosisTotalHours = 0;
                            }

                            @foreach (var department in Model.Departments)
                            {
                                var departmentShifts = shifts
                                .Where(s => s.Department == department.Name && s.Weekday == Array.IndexOf(daysOfTheWeek, day))
                                .ToList();
                                var hoursForDay = departmentShifts
                                .Sum(s => (s.EndTime - s.StartTime).TotalHours);
								var personnelForDay = hoursForDay / 8;

                                totalPersonnelForDay += personnelForDay;
                                totalHoursForDay += hoursForDay;

                                var prognosisDay = Model.Weeks
                                .First(w => w.Id == Model.WeekId)
                                .PrognosisDays
                                .FirstOrDefault(pd => pd.Weekday == Array.IndexOf(daysOfTheWeek, day));

                                var prognosisWorkHours = prognosisDay?.PrognosisDepartments
                                .FirstOrDefault(pd => pd.Department == department.Name)?.WorkHours ?? 0;

                                prognosisTotalHours += prognosisWorkHours;

                                <td class="text-center">@personnelForDay.ToString("F2")</td>
                                <td class="text-center">@hoursForDay.ToString("F2")</td>
                            }

                            <td class="text-center font-weight-bold">@totalPersonnelForDay.ToString("F2")</td>
                            <td class="text-center font-weight-bold">@totalHoursForDay.ToString("F2")</td>
                        </tr>
                        <tr class="prognosis-row" style="display: none;">
                            <td class="font-weight-bold">Prognose</td>
                            @foreach (var department in Model.Departments)
                            {
                                var prognosisDay = Model.Weeks
                                .First(w => w.Id == Model.WeekId)
                                .PrognosisDays
                                .FirstOrDefault(pd => pd.Weekday == Array.IndexOf(daysOfTheWeek, day));

                                var prognosisWorkHours = prognosisDay?.PrognosisDepartments
                                .FirstOrDefault(pd => pd.Department == department.Name)?.WorkHours ?? 0;

                                var prognosisPersonalHours = prognosisWorkHours / 8.0;

                                var departmentShiftsForDay = shifts
                                .Where(s => s.Department == department.Name && s.Weekday == Array.IndexOf(daysOfTheWeek, day))
                                .ToList();

                                var actualHours = departmentShiftsForDay
                                .Sum(s => (s.EndTime - s.StartTime).TotalHours);

                                var workHoursClass = actualHours >= prognosisWorkHours ? "text-success" : "text-danger";
                                var personalHoursClass = (actualHours / 8) >= prognosisPersonalHours ? "text-success" : "text-danger";

                                <td class="text-center @personalHoursClass">@prognosisPersonalHours.ToString("F2")</td>
                                <td class="text-center @workHoursClass">@prognosisWorkHours</td>
                            }
                            <td class="text-center font-weight-bold">@Math.Round(prognosisTotalHours / 8, 2).ToString("F2")</td>
                            <td class="text-center font-weight-bold">@prognosisTotalHours.ToString("F2")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </body>
}

@section Scripts {
    <script>
        document.getElementById("togglePrognosisButton").addEventListener("click", function() {
            var prognosisRows = document.querySelectorAll(".prognosis-row");
            prognosisRows.forEach(function(row) {
                row.style.display = (row.style.display === "none" || row.style.display === "") ? "table-row" : "none";
            });
        });
    </script>
}
