@model BumboSolid.Models.SchedulesViewModel

@{
    string[] daysOfTheWeek = { "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrijdag", "Zaterdag", "Zondag" };

    var schedule = Model.Weeks.First(w => w.Id == Model.WeekId);
    var shifts = schedule.Shifts;
    var departments = shifts.Select(s => s.Department).Distinct();

    DateTime startDate = GetFirstDateOfWeek(schedule.Year, schedule.WeekNumber);
    DateTime endDate = startDate.AddDays(6);
}

@functions {
    public static DateTime GetFirstDateOfWeek(int year, int weekOfYear)
    {
        var jan1 = new DateTime(year, 1, 1);
        var daysOffset = (int)DayOfWeek.Monday - (int)jan1.DayOfWeek;
        var firstMonday = jan1.AddDays(daysOffset > 0 ? daysOffset - 7 : daysOffset);
        return firstMonday.AddDays((weekOfYear - 1) * 7);
    }
}

<header class="d-flex flex-column align-items-center">
    <div class="d-flex w-100 header-items">
        <div class="d-flex justify-content-between align-items-center w-35">
            <a class="btn bumbo-btn" asp-action="ManagerSchedule" asp-route-id="@Model.WeekId">
                <i class="fa-regular fa-calendar"></i> Rooster
            </a>
            <a class="btn bumbo-btn @(!Model.PreviousWeekId.HasValue ? "disabled" : "")"
               asp-action="OverviewSchedule" asp-route-id="@Model.PreviousWeekId">
                <i class="fa-solid fa-arrow-left"></i> Vorige Week
            </a>
        </div>
        <div class="text-center d-flex flex-column align-items-center justify-content-center w-30">
            <h1>Rooster Overzicht</h1>
            <h6>@startDate.ToString("dd/MM/yyyy") - @endDate.ToString("dd/MM/yyyy")</h6>
        </div>
        <div class="d-flex justify-content-between align-items-center w-35">
            <a class="btn bumbo-btn @(!Model.NextWeekId.HasValue ? "disabled" : "")"
               asp-action="OverviewSchedule" asp-route-id="@Model.NextWeekId">
                Volgende Week <i class="fa-solid fa-arrow-right"></i>
            </a>
            <a class="btn bumbo-btn @(Model.IsCurrentWeek ? "disabled" : "")"
               asp-action="OverviewSchedule" asp-route-id="">
                <i class="fa-regular fa-circle-dot"></i> Huidige Week
            </a>
        </div>
    </div>
</header>

<div class="d-flex justify-content-around w-100">
    <a class="btn bumbo-btn" asp-action="Availabilities" asp-route-weekId="@Model.WeekId">
        <i class="fa-solid fa-user-clock"></i> Beschikbaarheid
    </a>
    <button id="togglePrognosisButton" class="btn bumbo-btn" type="button">
        <i class="fa-solid fa-code-compare"></i> Vergelijk Met Prognose
    </button>
</div>

@if (!Model.HasSchedule)
{
    <div class="d-flex flex-column align-items-center gap-5 m-5">
        <h3>Er is nog geen rooster aangemaakt.</h3>
        <h4>Maak er een aan!</h4>
        <form asp-action="Create">
            <div class="form-group">
                <input type="hidden" name="id" value="@Model.WeekId" />
                <input type="hidden" name="returnUrl" value="@Context.Request.Path" />
                <button type="submit" class="btn bumbo-btn"><i class="fa-solid fa-plus"></i> Nieuw Rooster Aanmaken</button>
            </div>
        </form>
    </div>
}
else
{
    <div class="container mt-4">
        <table class="table">
            <thead>
                <tr>
                    <th rowspan="2" class="table-corner-l">Dag</th>
                    @foreach (var department in Model.Departments.Select(d => d.Name))
                    {
                        <th colspan="2">@department</th>
                    }
                    <th colspan="2" class="table-corner-r">Totaal</th>
                </tr>
                <tr>
                    @foreach (var department in Model.Departments.Select(d => d.Name))
                    {
                        <th>FTE</th>
                        <th>Uren</th>
                    }
                    <th>FTE</th>
                    <th>Uren</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var day in daysOfTheWeek)
                {
                    <tr>
                        <td>@day</td>
                        @{
                            double totalPersonnelForDay = 0;
                            double totalHoursForDay = 0;
                            double prognosisTotalHours = 0;
                        }

                        @foreach (var department in Model.Departments)
                        {
                            var departmentShifts = shifts
                            .Where(s => s.Department == department.Name && s.Weekday == Array.IndexOf(daysOfTheWeek, day))
                            .ToList();

                            var hoursForDay = departmentShifts.Sum(s => (s.EndTime - s.StartTime).TotalHours);
                            var personnelForDay = hoursForDay / 8;

                            totalPersonnelForDay += personnelForDay;
                            totalHoursForDay += hoursForDay;

                            var prognosisDay = Model.Weeks
                            .First(w => w.Id == Model.WeekId)
                            .PrognosisDays
                            .FirstOrDefault(pd => pd.Weekday == Array.IndexOf(daysOfTheWeek, day));

                            var prognosisWorkHours = prognosisDay?.PrognosisDepartments
                            .FirstOrDefault(pd => pd.Department == department.Name)?.WorkHours ?? 0;

                            var prognosisPersonnelHours = prognosisWorkHours / 8.0;
                            prognosisTotalHours += prognosisWorkHours;

                            var workHoursClass = hoursForDay >= prognosisWorkHours ? "text-success" : "text-danger";
                            var personnelHoursClass = personnelForDay >= prognosisPersonnelHours ? "text-success" : "text-danger";

                            <td class="text-center">
                                <div>@personnelForDay.ToString("F2")</div>
                                <div class="prognosis-value @personnelHoursClass" style="display: none;">
                                    @prognosisPersonnelHours.ToString("F2")
                                </div>
                            </td>
                            <td class="text-center">
                                <div>@hoursForDay.ToString("F2")</div>
                                <div class="prognosis-value @workHoursClass" style="display: none;">
                                    @prognosisWorkHours.ToString("F2")
                                </div>
                            </td>
                        }

                        <td class="text-center font-weight-bold">
                            <div>@totalPersonnelForDay.ToString("F2")</div>
                            <div class="prognosis-value" style="display: none;">
                                @Math.Round(prognosisTotalHours / 8, 2).ToString("F2")
                            </div>
                        </td>
                        <td class="text-center font-weight-bold">
                            <div>@totalHoursForDay.ToString("F2")</div>
                            <div class="prognosis-value" style="display: none;">
                                @prognosisTotalHours.ToString("F2")
                            </div>
                        </td>
                    </tr>

                }
            </tbody>
        </table>
    </div>
}

@section Scripts {
    <script>
        document.getElementById('togglePrognosisButton').addEventListener('click', function () {
            const prognosisValues = document.querySelectorAll('.prognosis-value');
            prognosisValues.forEach(value => {
                value.style.display = value.style.display === 'none' ? 'block' : 'none';
            });
        });
    </script>
}
