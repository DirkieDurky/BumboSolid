@model BumboSolid.Models.PrognosesViewModel

@{
    string[] daysOfTheWeek = { "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrijdag", "Zaterdag", "Zondag" };

    var schedule = Model.Weeks.First(w => w.Id == Model.WeekId);
    var shifts = schedule.Shifts;

    DateTime startDate = GetFirstDateOfWeek(schedule.Year, schedule.WeekNumber);
    DateTime endDate = startDate.AddDays(6);
}

@functions {
    public static DateTime GetFirstDateOfWeek(int year, int weekOfYear)
    {
        var jan1 = new DateTime(year, 1, 1);
        var daysOffset = (int)DayOfWeek.Monday - (int)jan1.DayOfWeek;
        var firstMonday = jan1.AddDays(daysOffset > 0 ? daysOffset - 7 : daysOffset);
        return firstMonday.AddDays((weekOfYear - 1) * 7);
    }
}

<header class="d-flex flex-column align-items-center">
    <div class="d-flex w-100 header-items">
        <div class="d-flex justify-content-between align-items-center w-35">
            <a class="btn bumbo-btn" asp-controller="Prognoses" asp-action="Aanmaken">
                <i class="fa-solid fa-plus"></i> Prognose Aanmaken
            </a>
            <a class="btn bumbo-btn @(!Model.PreviousWeekId.HasValue ? "disabled" : "")"
               asp-action="Index" asp-route-id="@Model.PreviousWeekId">
                <i class="fa-solid fa-arrow-left"></i> Vorige Week
            </a>
        </div>
        <div class="text-center d-flex flex-column align-items-center justify-content-center w-30">
            <h1>Prognose</h1>
            <h6>@startDate.ToString("dd/MM/yyyy") - @endDate.ToString("dd/MM/yyyy")</h6>
        </div>
        <div class="d-flex justify-content-between align-items-center w-35">
            <a class="btn bumbo-btn @(!Model.NextWeekId.HasValue ? "disabled" : "")"
               asp-action="Index" asp-route-id="@Model.NextWeekId">
                Volgende Week <i class="fa-solid fa-arrow-right"></i>
            </a>
            <a class="btn bumbo-btn @(Model.IsCurrentWeek ? "disabled" : "")"
               asp-action="Index" asp-route-id="">
                <i class="fa-regular fa-circle-dot"></i> Huidige Week
            </a>
        </div>
    </div>
</header>

<br />

<div>
    @if (Model.Prognose != null)
    {
        <div class="d-flex flex-row justify-content-between gap-5 w-100">
            <table class="table w-75">
                <thead>
                    <tr>
                        <th rowspan="2" class="table-corner-l">Dag</th>
                        @foreach (var department in ViewBag.Departments)
                        {
                            <th colspan="2" class="text-center">@department</th>
                        }
                        <th colspan="2" class="text-center table-corner-r">Totaal</th>
                    </tr>
                    <tr>
                        @foreach (var department in ViewBag.Departments)
                        {
                            <th class="text-center">Personeel</th>
                            <th class="text-center">Uren</th>
                        }
                        <th class="text-center">Personeel</th>
                        <th class="text-center">Uren</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var day in daysOfTheWeek)
                    {
                        <tr>
                            <td>@day</td>
                            @{
                                double totalWorkHours = 0;
                                double totalStaff = 0;
                            }
                            @foreach (var department in ViewBag.Departments)
                            {
                                var d = Model.Prognose.PrognosisDays.FirstOrDefault(x => x.Weekday == Array.IndexOf(daysOfTheWeek, day))?.PrognosisDepartments.FirstOrDefault(x => x.Department == department);

                                var workHours = d == null ? 0 : d.WorkHours;
                                var staff = d == null ? 0 : double.Round((d.WorkHours / 8d), 2);
                                totalWorkHours += workHours;
                                totalStaff += staff;
                                <td class="text-center">@workHours</td>
                                <td class="text-center">@staff.ToString("F2")</td>
                            }

                            @* Add totals for the entire row (day) *@
                            <td class="text-center">@totalWorkHours</td>
                            <td class="text-center">@totalStaff.ToString("F2")</td>
                        </tr>
                    }
                </tbody>
            </table>
            <table class="table w-25">
                <thead>
                    <tr>
                        <th class="table-corner-l">Externe Factoren</th>
                        <th class="table-corner-r">Verwachte Bezoekersdrukte</th>
                    </tr>
                    <tr>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var day in daysOfTheWeek)
                    {
                        <tr>
                            @{
                                double totalImpact = 1.0;

                                var prognosisDay = Model.Prognose.PrognosisDays.FirstOrDefault(x => x.Weekday == Array.IndexOf(daysOfTheWeek, day));
                                var factors = prognosisDay?.Factors;

                                if (factors != null)
                                {
                                    foreach (var factor in factors)
                                    {
                                        var impactFactor = 1 + (factor.Impact / 100.0);
                                        totalImpact *= impactFactor;
                                    }
                                }
                                else
                                {
                                    totalImpact = 1;
                                }
                                int roundedTotalImpact = (int)Math.Round((totalImpact - 1) * 100);
                                string impactString = roundedTotalImpact.ToString() + "%";
                                if (roundedTotalImpact >= 0) impactString = "+" + impactString;
                            }
                            <td>
                                <div class="box highlight">
                                    @impactString
                                </div>
                            </td>
                            @{
                                var visitorEstimate = Model.Prognose.PrognosisDays.FirstOrDefault(x => x.Weekday == Array.IndexOf(daysOfTheWeek, day))?.VisitorEstimate ?? 0;
                                visitorEstimate = (int)(visitorEstimate * totalImpact);
                            }
                            <td>
                                <div class="box highlight">
                                    @visitorEstimate
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <br />

        <div class="d-flex justify-content-between w-100">
            <a class="btn bumbo-btn" asp-controller="Normeringen" asp-action="">Normeringen Beheren</a>
            <a class="btn bumbo-btn" asp-controller="Feestdagen" asp-action="">Feestdagen Beheren</a>
            <a class="btn bumbo-btn" asp-controller="Weer" asp-action="Bewerken">Weer-waarden Bewerken</a>
            <!-- ? -->
            <a class="btn bumbo-btn" asp-controller="Factors" asp-action="Edit" asp-route-id="@Model.Prognose.Id">Factoren Beheren</a>
        </div>
    }
    else
    {
        <span>Er zijn nog geen prognoses aangemaakt. Klik </span>
        <a asp-controller="Prognoses" asp-action="Aanmaken">hier</a>
        <span> om er een aan te maken!</span>
    }
</div>


